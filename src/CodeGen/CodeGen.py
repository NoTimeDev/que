import copy
import json
from typing import cast 

class Env:
    def __init__(self, Parent = None):
        self.Parent = Parent
        self.Funcs: dict = {}
        self.VReg: dict = {}
    def AddFunc(self, Name, Value):
        self.Funcs.update({Name  : Value})
    def GetFunc(self, Name) -> dict:
        if self.Funcs.get(Name) == None and self.Parent != None:
            return self.Parent.GetFunc(Name)
        elif self.Funcs.get(Name) != None:
            return cast(dict, self.Funcs.get(Name))
        else:
            return cast(dict, None )
    def AddVar(self, Name, Value):
        self.VReg.update({Name : Value})
    def GetVar(self, Name) -> dict:
        if self.VReg.get(Name) == None and self.Parent != None:
            return self.Parent.GetVar(Name)
        elif self.VReg.get(Name) != None:
            return cast(dict, self.VReg.get(Name))
        else:
            return cast(dict, None)
    def Removevar(self, Name):
        if self.VReg.get("Name") == None and self.Parent != None:
            self.Parent.Removevar(Name)
        elif self.VReg.get(Name) != None:
            self.VReg.pop(Name)
class CodeGen:
    def __init__(self, Ast: dict, Meta: dict, plat: str, mac: str, CLInfo: dict[str, bool]):
        self.Ast: dict = Ast
        self.Env: Env = Env()
        self.Genv: Env = self.Env
        self.EnvList: list[Env] = []
        self.space: int = 0
        self.plat: str = plat
        self.mac: str = mac 

        self.lastcall = None
        
        self.FuncLocal = Meta['Funcs']
        self.StructLocal = Meta['Structs']
        self.Global = Meta['global']
        self.InitStructs()

        self.Nums: int = 0
        self.Pos: int  = 0
        self.Info = {
            "AllocSpace" : 0,
            "Higest" : 0,
            "Floats" : 0,
            "FloatsVal" : {},
        }  
        
        self.Ditch = 0 
        self.VarWithRegName = []
        self.VarWithRegName_Simd = []

        self.VarWithRegNameList = []
        self.VarWithRegName_SimdList = []
        self.Register: dict = {
            "General" : {
                "64" : ["rax", "rbx", "rdx", "rcx", "rdi", "rsi","r8","r9","r10","r11","r12","r13","r14","r15"],
                "32" : ["eax", "ebx", "edx", "ecx", "edi", "esi","r8d","r9d","r10d","r11d","r12d","r13d","r14d","r15d"],
                "16" : ["ax", "bx", "dx", "cx", "di", "si","r8w","r9w","r10w","r11w","r12w","r13w","r14w","r15w"],
                "8" : ["al", "bl", "dl", "cl", "dil", "sil","r8b","r9b","r10b","r11b","r12b","r13b","r14b","r15b"]
            },

            "Simd" : ["xmm0","xmm1","xmm2","xmm3","xmm4","xmm5","xmm6","xmm7","xmm8","xmm9","xmm10","xmm11","xmm12","xmm13","xmm14","xmm15"]
        }
        self.AllRegisters: dict = copy.deepcopy(self.Register)

        self.FreeStackSpace: dict = {
            "64" : [],
            "32" : [],
            "16" : [],
            "8" : [],
        }
        self.FreeStackSpaceList = []
        self.URegister: dict = {
            "General" : {
                "64" : [],
                "32" : [],
                "16" : [],
                "8" : [],
            },

            "Simd" : []
        }
        self.RRegister: dict = {
            "General" : {
                "64" : [],
                "32" : [],
                "16" : [],
                "8" : [],
            },

            "Simd" : []
        }
        
        self.EmtryRegs: dict = copy.deepcopy(self.URegister) 
        self.IntSizes: str = "64"
        self.FloatSizes: str = "64"
        self.Text: list[str] = [";--Generated By Que!--",
                                f"%include \"{self.mac}\"",
                                "bits 64",
                                "default rel",
                                "section .text"]
        
        self.RoData: list[str] = ["section .rodata"]
        self.Data: list[str] = ["section .data"] 
        if CLInfo['-nomain'] == False:
            self.Bss: list[str] = ["section .bss", "\treg_storage resq 16", "\txmm_storage resq 16"]
        else:
            self.Text.append("extern reg_storage")
            self.Text.append("extern xmm_storage")
            self.Bss: list[str] = ["section .bss"]
    def aling16(self, num: int):
        if num == 0:
            return 16 
        while num % 16 != 0:
            num+=1 

        return num 
    def InitStructs(self):
        for i in self.StructLocal.keys():
            it  = self.StructLocal[i]
            Map = {

            }
            MapClone = {}
            num = 0 
            size  = 0 
            for i_ in it['Elements']:
                if i_['Type']['Kind'] != 'Pad':
                    num+=1 
                    Map[str(num)] = size 
                    MapClone[str(num)] = size
                size+=int(i_['Size'])
          

            for indx, i in enumerate(Map.keys()):
                MapClone[str(indx - int(i))] = Map[i]
            it['Map'] = MapClone 
    def Gen(self):
        while self.Pos < len(self.Ast['Body']):
            self.GenNode(self.Ast['Body'][self.Pos])
            self.Pos+=1 

        code = '\n'.join(self.Text)
        if self.RoData != ["section .rodata"]:
            code+='\n'+'\n'.join(self.RoData)
        if self.Data != ["section .data"]:
            code+='\n'+'\n'.join(self.Data)
        if self.Bss != ["section .bss"]:
            code+='\n'+'\n'.join(self.Bss)
        
        return code 
    def GenFunc(self, Node):
        self.FuncLocal.update({Node['Name'] : True})
        self.Env.AddFunc(Node.get("Name"), {
            "Type" : Node.get("Type"),
            "Args" : Node.get("Args")
        })
        
        #scope----
        self.VarWithRegName_SimdList.append(copy.deepcopy(self.VarWithRegName_SimdList))
        self.VarWithRegNameList.append(copy.deepcopy(self.VarWithRegNameList))
        self.EnvList.append(copy.deepcopy(self.Env))
        self.Env = Env(self.Env)
        self.VarWithRegName_Simd = []
        self.VarWithRegName = []
        self.FreeStackSpaceList.append(copy.deepcopy(self.FreeStackSpace))
        self.FreeStackSpace = {
            "64" : [],
            "32" : [],
            "16" : [],
            "8" : [],
        }
        #---
        self.Register = copy.deepcopy(self.AllRegisters)
        self.URegister = copy.deepcopy(self.EmtryRegs)
        self.RRegister = copy.deepcopy(self.EmtryRegs)
        self.Text.append(f"global {Node.get('Name')[1:]}")
        self.Text.append(f"{Node.get('Name')[1:]}:") 
        self.Text.append(f"\tpush rbp")
        self.Text.append(f"\tmov rbp, rsp")
        self.Text.append(f"\t----Space--")
        self.space = len(self.Text)
        self.Text.append(f"\t.saveregs")
        self.Info['AllocSpace'] = 0

        if self.plat == "Linux":
            args_reg_int = {
                "1" : "rdi",
                "2" : "rsi",
                "3" : "rdx",
                "4" : "rcx",
                "5" : "r8",
                "6" : "r9"
            }

            args_reg_float = {
                "0" : "xmm0",
                "1" : "xmm1",
                "2" : "xmm2",
                "3" : "xmm3",
                "4" : "xmm4",
                "5" : "xmm5",
                "6" : "xmm6",
                "7" : "xmm7",
            }

            if len(Node['Args']) != 0: 
                intargs = 0 
                floatargs = -1
                stacksize = 8 
                stackpos = 0
                for indx, i in enumerate(Node['Args']):
                    if i['Type']['Kind'] == "Primitive":
                        Size = int(i['Type']['Size']) // 8
                        self.Info['AllocSpace']+=Size 
                        if i['Type']['Val'][0] == 'i':
                            if intargs >= 6: 
                                stacksize+=8
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize}]",
                                    "MustLoad" : False,
                                    "InReg" : True,
					                "Ditch" : False,
                                    "Simd" : False,
                                })          
                                self.VarWithRegName.append(i['Name'])
                            else:
                                intargs+=1
                                self.Text.append(f"\tmov {self.GetDataSize(i['Type']['Size'])} [rbp-{self.Info['AllocSpace']}], {self.GetSizeOfReg(i['Type']['Size'] ,args_reg_int[str(intargs)])}")
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : False,
                                })          
                                self.VarWithRegName.append(i['Name'])
                        if i['Type']['Val'][0] == 'f':
                            if floatargs >= 6: 
                                stackpos+=1
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : True,
                                })          
                                self.VarWithRegName_Simd.append(i['Name'])
                            else:
                                floatargs+=1
                                self.Text.append(f"\tmovs{self.GetDataSize(i['Type']['Size'], type_='Simd')} [rbp-{self.Info['AllocSpace']}], {args_reg_float[str(floatargs)]}")
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : True,
                                })          
                                self.VarWithRegName_Simd.append(i['Name'])
                    if i['Type']['Kind'] == "Pointer":
                        self.Info['AllocSpace']+=8 
                        if intargs >= 6: 
                            stackpos+=1
                            self.Env.AddVar(i['Name'], {
                                "Type" : i['Type'],
                                "Register" : f"[rbp+{stacksize}]",
                                "MustLoad" : False,
                                "InReg" : True,
                                "Ditch" : False,
                                "Simd" : False,
                            })          
                            self.VarWithRegName.append(i['Name'])
                        else:
                            intargs+=1
                            self.Text.append(f"\tmov qword [rbp-{self.Info['AllocSpace']}], {args_reg_int[str(intargs)]}")
                            self.Env.AddVar(i['Name'], {
                                "Type" : i['Type'],
                                "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                                "MustLoad" : False,
                                "InReg" : False,
					            "Ditch" : False,
                                "Simd" : False,
                            })          
                            self.VarWithRegName.append(i['Name'])
                       
        elif self.plat == "Windows":
            args_reg_int = {
                "1" : "rcx",
                "2" : "rdx",
                "3" : "r8",
                "4" : "r9",
            }

            args_reg_float = {
                "0" : "xmm0",
                "1" : "xmm1",
                "2" : "xmm2",
                "3" : "xmm3",
            }


            if len(Node['Args']) != 0: 
                intargs = -1 
                floatargs = 0

                stacksize_ = 40 

                stacksize = 8 
                for indx, i in enumerate(Node['Args']):
                    if indx >= 4: 
                        stacksize_+=8
                        if i['Type']['Kind'] == "Primitive":
                            if i['Type']['Val'][0] == "i":
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize_}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : False,
                                })          
                                self.VarWithRegName.append(i['Name'])
                            if i['Type']['Val'][0] == "f":
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize_}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : True,
                                })          
                                self.VarWithRegName_Simd.append(i['Name'])
                        if i['Type']['Kind'] == "Pointer":
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize_}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : False,
                                })          
                                self.VarWithRegName.append(i['Name'])  
                    else:
                        if i['Type']['Kind'] == "Primitive":
                            if i['Type']['Val'][0] == "i":
                                stacksize+=8
                                intargs+=1
                                self.Text.append(f"\tmov {self.GetDataSize(i['Type']['Size'])} [rbp+{stacksize}], {self.GetSizeOfReg(i['Type']['Size'],args_reg_int[str(intargs + 1)])}")
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : False,
                                })          
                                self.VarWithRegName.append(i['Name'])
                            if i['Type']['Val'][0] == "f":
                                stacksize+=8 
                                floatargs+=1
                                self.Text.append(f"\tmovs{self.GetDataSize(i['Type']['Size'], type_='Simd')} [rbp+{stacksize}], {args_reg_float[str(floatargs)]}")
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : True,
                                })          
                                self.VarWithRegName_Simd.append(i['Name'])
                        if i['Type']['Kind'] == "Pointer":
                                stacksize+=8 
                                intargs+=1 
                                self.Text.append(f"\tmov qword [rbp+{stacksize}], {args_reg_int[str(intargs + 1)]}")
                                self.Env.AddVar(i['Name'], {
                                    "Type" : i['Type'],
                                    "Register" : f"[rbp+{stacksize}]",
                                    "MustLoad" : False,
                                    "InReg" : False,
					                "Ditch" : False,
                                    "Simd" : False,
                                })          
                                self.VarWithRegName.append(i['Name'])
                            

        for i in Node['Body']:
            self.GenNode(i)
        self.Env = self.EnvList.pop()
        self.VarWithRegName = self.VarWithRegNameList.pop()
        self.VarWithRegName_Simd = self.VarWithRegName_SimdList.pop()
        self.FreeStackSpace = self.FreeStackSpaceList.pop()
        self.Text[self.space - 1] = f"\tsub rsp, {self.aling16(self.Info['Higest'])}"
        self.Info['AllocSpace'] = 0
    def MarkUse(self, Reg, type_="General"):
        if type_ == "General":
            rlist = self.GetRegList(Reg)
            pos = self.Register['General']['64'].index(rlist[0]) 
            self.URegister['General']['64'].append(self.Register['General']['64'].pop(pos))
            self.URegister['General']['32'].append(self.Register['General']['32'].pop(pos))
            self.URegister['General']['16'].append(self.Register['General']['16'].pop(pos))
            self.URegister['General']['8'].append(self.Register['General']['8'].pop(pos))
        else:
            pos = self.Register['Simd'].index(Reg)
            self.URegister['Simd'].append(self.Register['Simd'].pop(pos))

    def GenBin(self, Node):
        Inst = Node['inst']

        size = Node['Type']['Size']
        self.IntSizes = size
        if Inst == "add":
            if Node['Left']['Kind'] == "Integer":

                Num = Node['Left']['Value']

                Right = self.GenNode(Node['Right'])
                reg = self.GetReg(size)
                self.Text.append(f"\tmov {self.GetDataSize(size)} {reg}, {Right}")
                self.Text.append(f"\tadd {self.GetDataSize(size)} {reg}, {Num}\n")
    
                self.VarWithRegName.append(Node['Name'])
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })

                return reg
            elif Node['Right']['Kind'] == "Integer":
                Num = Node['Right']['Value']

                Left = self.GenNode(Node['Left'])
                reg = self.GetReg(size)
                self.Text.append(f"\tmov {self.GetDataSize(size)} {reg}, {Left}")
                self.Text.append(f"\tadd {self.GetDataSize(size)} {reg}, {Num}\n")
                
                self.VarWithRegName.append(Node['Name'])
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })

                return reg 
            else:
               
                Left = self.GenNode(Node['Left'])
                Right = self.GenNode(Node['Right'])
                reg = self.GetReg(size)
                self.Text.append(f"\tmov {self.GetDataSize(size)} {reg}, {Left}")
                self.Text.append(f"\tadd {self.GetDataSize(size)} {reg}, {Right}\n")
 
                self.VarWithRegName.append(Node['Name'])
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })

                return reg 
        elif Inst == "sub":
            if Node['Right']['Kind'] == "Integer":
                Left = self.GenNode(Node['Left'])
                reg = self.GetReg(size)
                self.Text.append(f"\tmov {self.GetDataSize(size)} {reg}, {Left}") 
                self.Text.append(f"\tsub {self.GetDataSize(size)} {reg}, {Node['Right']['Value']}\n")
                

                self.VarWithRegName.append(Node['Name'])
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })
                return reg 
            else:
                reg = self.GetReg(size) 
                Right = self.GenNode(Node['Right'])
                Left = self.GenNode(Node['Left'])
                self.Text.append(f"\tmov {self.GetDataSize(size)} {reg}, {Left}") 
                self.Text.append(f"\tsub {self.GetDataSize(size)} {reg}, {Right}\n")
                
                self.VarWithRegName.append(Node['Name'])
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })
                return reg 
        elif Inst in ["mul", "imul", "idiv", "div", "mod", "imod"]:
            self.ReserveReg('rax', '64')
            self.ReserveReg('rdx', '64')
            
            Left = self.GenNode(Node['Left'])
            self.Text.append(f"\tmov {self.GetDataSize(size)} {self.GetSizeOfReg(size, 'rax')}, {Left}")
            Right = self.GenNode(Node['Right'])
            if Inst == "mod":
                self.Text.append(f"\tdiv {Right}")
            elif Inst == "imod":
                self.Text.append(f"\tidiv {Right}")
            else:
                self.Text.append(f"\t{Inst} {Right}")
            self.ReturnReserve('rax', '64')
            self.ReturnReserve('rdx', '64')
            
            self.MarkUse('rax')
            self.VarWithRegName.append(Node['Name'])
            self.Env.AddVar(Node['Name'], {
                "Type" : Node['Type'],
                "Register" : self.GetSizeOfReg(size, 'rax') if Inst not in ["imod", "mod"] else  self.GetSizeOfReg(size, 'rdx'),
                "MustLoad" : False,
                "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
            })
            return self.GetSizeOfReg(size, 'rax') if Inst not in ["imod", "mod"] else  self.GetSizeOfReg(size, 'rdx') 
        elif Inst in ["xor", "and", "or"]:
            op1 = self.GenNode(Node['Left'])
            op2 = self.GenNode(Node['Right'])

            reg = self.GetReg(Node['Type']['Size'])
            self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, {op1}")
            self.Text.append(f"\t{Inst} {reg}, {op2}")
            
            self.VarWithRegName.append(Node['Name'])
            self.Env.AddVar(Node['Name'], {
                "Type" : Node['Type'],
                "Register" : reg,
                "MustLoad" : False,
                "InReg" : True,
				"Ditch" : False,
                "Simd" : False,
            })
            return reg
    def ensureload(self, reg, size, type_: str = "General"):
        if type_ == "General":
            if reg not in self.URegister['General'][size]:
                nreg = self.GetReg(size)
                self.Text.append(f"\tmov {self.GetDataSize(size)} {nreg}, {reg}")
                return nreg 
            else: 
                return reg 
        else:
            if reg not in self.URegister['Simd']:
                nreg = self.GetReg(size, type_="Simd")
                self.Text.append(f"\tmovs{self.GetDataSize(size, type_='Simd')} {nreg}, {reg}")
                return nreg 
            else: 
                return reg 

    def GetSizeOfReg(self, size, reg, type_: str = "General"):
        if type_ == "General":
            reglist = self.GetRegList(reg)
            if size == "64":
                return reglist[0] #type: ignore 
            if size == "32":
                return reglist[1] #type: ignore
            if size == "16":
                return reglist[2] #type: ignore
            if size == "8":
                return reglist[3] #type: ignore
    def GetGlobalSize(self, size: str):
        if size == "64":
            return "dq"
        elif size == "32":
            return "dd"
        elif size == "16":
            return "dw"
        else:
            return "db"

    def GetDataSize(self, size: str, type_: str = "General"):
        if type_ == "General":
            if size == "64":
                return "qword"
            elif size == "32":
                return "dword"
            elif size == "16":
                return "word"
            elif size == "8":
                return "byte"
        else:
            if size == "32":
                return "s"
            else:
                return "d"
    def GetRegList(self, reg, type_: str="General"):
        if type_ == "General":
            pos = 0
            if reg in self.AllRegisters['General']['64']:
                pos+= self.AllRegisters['General']['64'].index(reg)
                 
            elif reg in self.AllRegisters['General']['32']:
                pos+= self.AllRegisters['General']['32'].index(reg)

            elif reg in self.AllRegisters['General']['16']:
                pos+= self.AllRegisters['General']['16'].index(reg)

            elif reg in self.AllRegisters['General']['8']:
                pos+= self.AllRegisters['General']['8'].index(reg)
           
            return [
                self.AllRegisters['General']['64'][pos],
                self.AllRegisters['General']['32'][pos],
                self.AllRegisters['General']['16'][pos],
                self.AllRegisters['General']['8'][pos]
            ]
                     

    def GetReg(self, size, type_: str = "General"):
        if type_ == "General":
            if len(self.Register['General']['64']) != 0:
                reg = self.Register['General'][size][-1]
                self.URegister['General']['64'].append(self.Register['General']['64'].pop(-1))
                self.URegister['General']['32'].append(self.Register['General']['32'].pop(-1))
                self.URegister['General']['16'].append(self.Register['General']['16'].pop(-1))
                self.URegister['General']['8'].append(self.Register['General']['8'].pop(-1))
                return reg
            else:
                reg = self.URegister['General'][size][0]
                registerlist = self.GetRegList(reg)
                for i in self.VarWithRegName:
                    elemet = self.Env.VReg[i]
                    if elemet['Register'] in registerlist and elemet['Ditch'] != True:
                        esize: str = ""
                        if elemet['Register'] == registerlist[0]: # pyright: ignore
                            esize+="64"
                        elif elemet['Register'] == registerlist[1]: # pyright: ignore
                            esize+="32"
                        if elemet['Register'] == registerlist[2]: # pyright: ignore
                            esize+="16"
                        if elemet['Register'] == registerlist[3]: # pyright: ignore
                            esize+="8"


                        if len(self.FreeStackSpace[esize]) != 0:
                            space = self.FreeStackSpace[esize].pop(0)
                        else: 
                            self.Info['AllocSpace']+=int(esize) // 8
                            space = f"[rbp-{self.Info['AllocSpace']}]"

                        self.Text.append(f"\tmov {self.GetDataSize(esize)} {space}, {elemet['Register']}")
                        elemet['InReg'] = False
                        elemet['Register'] = space
                        self.VarWithRegName.remove(i)
                    elif elemet["Ditch"] == True and elemet["Register"] == reg: 
                        self.VarWithRegName.remove(i)
                

                self.URegister['General']['64'].append(self.URegister['General']['64'].pop(0))
                self.URegister['General']['32'].append(self.URegister['General']['32'].pop(0))
                self.URegister['General']['16'].append(self.URegister['General']['16'].pop(0))
                self.URegister['General']['8'].append(self.URegister['General']['8'].pop(0))
                return reg
        elif type_ == "Simd":
            if len(self.Register['Simd']) != 0:
                reg = self.Register['Simd'][-1]
                self.URegister['Simd'].append(self.Register['Simd'].pop(-1))
                return reg
            else:
                reg = self.URegister['Simd'][0]
                for i in self.VarWithRegName_Simd:
                    elemet = self.Env.VReg[i]
                    if elemet['Register'] == reg and elemet['Ditch'] != True:
                        esize = ""
                        if elemet['Type']['Size'] == '32':
                            esize+="4"
                        else:
                            esize+="8"
                         
                        if len(self.FreeStackSpace[esize]) != 0:
                            space = self.FreeStackSpace[esize].pop(0)
                        else: 
                            self.Info['AllocSpace']+=int(esize) // 8
                            space = f"[rbp-{self.Info['AllocSpace']}]"

                        self.Text.append(f"\tmov {self.GetDataSize(esize, type_='Simd')} {space}, {reg}")
                        elemet['InReg'] = False
                        elemet['Register'] = space   
                        self.VarWithRegName_Simd.remove(i) 
                    elif elemet["Ditch"] == True and elemet["Register"] == reg: 
                        self.VarWithRegName_Simd.remove(i) 
                
                self.URegister['Simd'].append(self.URegister['Simd'].pop(0))
                return reg 
    def GenFloat(self, Node):
        reg = self.GetReg('0', type_='Simd')
        if Node['Value'] not in list(self.Info['FloatsVal'].keys()):
            self.RoData.append(f"\tFLT{self.Info['Floats']} {self.GetGlobalSize(self.FloatSizes)} {Node.get('Value')}")               
            self.Text.append(f"\tmovs{self.GetDataSize(self.FloatSizes, type_='Simd')} {reg}, [FLT{self.Info['Floats']}]")
            self.Info['FloatsVal'].update({Node['Value'] : f"FLT{self.Info['Floats']}"})
        else:
            self.Text.append(f"\tmovs{self.GetDataSize(self.FloatSizes, type_='Simd')} {reg}, [{self.Info['FloatsVal'][Node['Value']]}]")
        

        self.Env.AddVar("Float" + str(self.Info['Floats']), {
            "Type" : {
                "Kind": "Primitive",
                "Val": "f" + self.FloatSizes,        
                "Size" : self.FloatSizes,
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
			"Ditch" : True,
            "Simd" : True,
        })
        
        self.VarWithRegName_Simd.append("Float" + str(self.Info['Floats']))
        
        self.Info['Floats']+=1 
        return reg  

    def GenInt(self, Node):
        reg = self.GetReg(self.IntSizes)

        self.Text.append(f"\tmov {self.GetDataSize(self.IntSizes)} {reg}, {Node.get('Value')}")

        self.VarWithRegName.append("Int" + str(self.Nums))
        self.Env.AddVar("Int" + str(self.Nums), {
            "Type" : {
                "Kind": "Primitive",
                "Val": "i" + self.IntSizes,        
                "Size" : self.IntSizes,
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
					"Ditch" : True,
                    "Simd" : False,
        })
        self.Nums+=1 
        return reg
   
    def GenLoad(self, Node):
        if Node['Type']['Kind'] == "Primitive":
            if Node['Type']['Val'][0] == "i":
                Var = self.Env.GetVar(Node['Loading'])
                reg = self.GetReg(Node['Type']['Size']) # type: ignore[]

                if Node['Pointer'] == False:
                    self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, {Var['Register']}") #type: ignore[]
                else:
                    regy = Var['Register'] #type: ignore[]
                    self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, [{regy}]")
                     
                self.Env.AddVar(Node['Into'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : True,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })
                self.VarWithRegName.append(Node['Into'])

            else:
                Var = self.Env.GetVar(Node['Loading'])
                reg = self.GetReg(Node['Type']['Size'], type_="Simd") # type: ignore[]
                
                if Node['Pointer'] == False:
                    self.Text.append(f"\tmovs{self.GetDataSize(Node['Type']['Size'], type_='Simd')} {reg}, {Var['Register']}") #type: ignore[]
                else:
                    regy = Var['Register'] #type: ignore[]
                    self.Text.append(f"\tmovs{self.GetDataSize(Node['Type']['Size'], type_='Simd')} {reg}, [{regy}]")

                self.VarWithRegName_Simd.append(Node['Into'])
                self.Env.AddVar(Node['Into'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : True,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
                })
        elif Node['Type']['Kind'] == "Pointer":
            var = self.Env.GetVar(Node['Loading'])
            reg = self.GetReg(Node['Type']['Size'])
            ptr = var['Register']
            
            if Node['Pointer'] == False:
                self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, {ptr}")
            else:
                self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, [{ptr}]")
            
            self.Env.AddVar(Node['Into'], {
                "Type" : Node['Type'],
                "Register" : reg,
                "MustLoad" : True,
                "InReg" : True,
		        "Ditch" : False,
                "Simd" : False,
            })


            self.VarWithRegName.append(Node['Into'])

    def GenLocalIdent(self, Node):
        Var = self.Env.GetVar(Node['Name'])
        if Var['MustLoad'] == True and Var['InReg'] == False: #type: ignore
            if Var['Type']['Kind'] == "Primitive":
                if Var['Type']['Val'][0] == 'i':
                    reg = self.GetReg(Var['Type']['Size']) #type: ignore

                    self.Text.append(f"\tmov {self.GetDataSize(Var['Type']['Size'])} {reg}, {Var['Register']}") #type: ignore
                    
                    Var['InReg'] = False 
                    Var['Register'] = reg 
                    return reg
                else:
                    reg = self.GetReg(Var['Type']['Size'], type_='Simd') #type: ignore

                    self.Text.append(f"\tmov{self.GetDataSize(Var['Type']['Size'], type_='Simd')} {reg}, {Var['Register']}") #type: ignore
                    Var['InReg'] = False 
                    Var['Register'] = reg 
                    return reg
            elif Var['Type']['Kind'] == "Pointer":
                reg = self.GetReg("64")
                
                self.Text.append(f"\tmov qword {reg}, {Var['Register']}")
                Var['InReg'] = False 
                Var['Register'] = reg 
                return reg 
        else:
            return Var['Register'] #type: ignore
    
    def ReserveReg(self, name, size, type_="General"):
        if type_ == "General":
            RegList = self.Register['General'][size]
            URegList = self.URegister['General'][size]
        

            if name in RegList:
                pos = RegList.index(name)

                self.RRegister['General']['64'].append(self.Register['General']['64'].pop(pos))
                self.RRegister['General']['32'].append(self.Register['General']['32'].pop(pos))
                self.RRegister['General']['16'].append(self.Register['General']['16'].pop(pos))
                self.RRegister['General']['8'].append(self.Register['General']['8'].pop(pos)) 
            elif name in URegList:
                pos = URegList.index(name)
                reg = name 
                registerlist = self.GetRegList(reg)
                for i in self.VarWithRegName:
                    elemet = self.Env.VReg[i]
                    if elemet["Register"] in registerlist and elemet["Ditch"] != True:
                        esize: str = ""
                        if elemet['Register'] == registerlist[0]: # pyright: ignore
                            esize+="64"
                        elif elemet['Register'] == registerlist[1]: # pyright: ignore
                            esize+="32"
                        if elemet['Register'] == registerlist[2]: # pyright: ignore
                            esize+="16"
                        if elemet['Register'] == registerlist[3]: # pyright: ignore
                            esize+="8"

    
                        if len(self.FreeStackSpace[esize]) != 0:
                            space = self.FreeStackSpace[esize].pop(0)
                        else: 
                            self.Info['AllocSpace']+=int(esize) // 8
                            space = f"[rbp-{self.Info['AllocSpace']}]"

                        self.Text.append(f"\tmov {self.GetDataSize(esize)} {space}, {elemet['Register']}")
                        elemet['InReg'] = False
                        elemet['Register'] = space
                        self.VarWithRegName.remove(i)
                    elif elemet["Ditch"] == True and elemet["Register"] == reg: 
                        self.VarWithRegName.remove(i) 
                
                self.RRegister['General']['64'].append(self.URegister['General']['64'].pop(pos))
                self.RRegister['General']['32'].append(self.URegister['General']['32'].pop(pos))
                self.RRegister['General']['16'].append(self.URegister['General']['16'].pop(pos))
                self.RRegister['General']['8'].append(self.URegister['General']['8'].pop(pos))
           
                bitreg64 = self.GetRegList(name)[0] #type: ignore
                self.Text.append(f"\txor {bitreg64}, {bitreg64}")
        else:
            if name in self.Register['Simd']:
                self.RRegister['Simd'].append(self.Register['Simd'].pop(self.Register['Simd'].index(name)))
                return name 
            else:
                reg = name
                pos = self.URegister['Simd'].index(name)
                for i in self.VarWithRegName_Simd:
                    elemet = self.Env.VReg[i]
                    if elemet['Register'] == reg and elemet['Ditch'] != True:
                        esize = ""
                        if elemet['Type']['Size'] == '32':
                            esize+="4"
                        else:
                            esize+="8"
                         
                        if len(self.FreeStackSpace[esize]) != 0:
                            space = self.FreeStackSpace[esize].pop(0)
                        else: 
                            self.Info['AllocSpace']+=int(esize) // 8
                            space = f"[rbp-{self.Info['AllocSpace']}]"

                        self.Text.append(f"\tmov {self.GetDataSize(esize, type_='Simd')} {space}, {reg}")
                        elemet['InReg'] = False
                        elemet['Register'] = space   
                        self.VarWithRegName_Simd.remove(i) 
                    elif elemet["Ditch"] == True and elemet["Register"] == reg: 
                        self.VarWithRegName_Simd.remove(i) 
                
                self.RRegister['Simd'].append(self.URegister['Simd'].pop(pos))
                return reg 
    
    def protectreg(self, reg, size):
        URegList = self.URegister['General'][size]
        
        pos = URegList.index(reg)

        self.RRegister['General']['64'].append(self.URegister['General']['64'].pop(pos))
        self.RRegister['General']['32'].append(self.URegister['General']['32'].pop(pos))
        self.RRegister['General']['16'].append(self.URegister['General']['16'].pop(pos))
        self.RRegister['General']['8'].append(self.URegister['General']['8'].pop(pos)) 
    
    def unprotectreg(self, reg, size):
        Rreglist = self.RRegister['General'][size]

        pos = Rreglist.index(reg)
        self.URegister['General']['64'].append(self.RRegister['General']['64'].pop(pos))
        self.URegister['General']['32'].append(self.RRegister['General']['32'].pop(pos))
        self.URegister['General']['16'].append(self.RRegister['General']['16'].pop(pos))
        self.URegister['General']['8'].append(self.RRegister['General']['8'].pop(pos))

    def ReturnReserve(self, name, size, type_ = "General"):
        if type_ == "General":
            pos = self.RRegister['General'][size].index(name)
            
            self.Register['General']['64'].append(self.RRegister['General']['64'].pop(pos))
            self.Register['General']['32'].append(self.RRegister['General']['32'].pop(pos))
            self.Register['General']['16'].append(self.RRegister['General']['16'].pop(pos))
            self.Register['General']['8'].append(self.RRegister['General']['8'].pop(pos))
        else:
            pos = self.RRegister['Simd'].index(name)
            self.Register['Simd'].append(self.RRegister['Simd'].pop(pos))
    def GenRet(self, Node):
        if Node['Type']['Kind'] == "Primitive":
            if Node['Type']['Val'][0] == "i":
                self.IntSizes = Node['Type']['Size']
                self.ReserveReg('rax', '64')

                vl = self.GenNode(Node['Value'])
                self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {self.GetSizeOfReg(Node['Type']['Size'], 'rax')}, {vl}")
                self.ReturnReserve("rax", "64")
            elif Node['Type']['Val'][0] == "f":
                self.IntSizes = Node['Type']['Size']
                self.ReserveReg('xmm0', '0', type_="Simd")

                vl = self.GenNode(Node['Value'])
                self.Text.append(f"\tmov{self.GetDataSize(Node['Type']['Size'], type_='Simd')} xmm0, {vl}")
                self.ReturnReserve("xmm0", "0", type_="Simd")
        if Node['Type']['Kind'] == "Pointer":
            self.IntSizes = Node['Type']['Size']
            self.ReserveReg('rax', '64')

            vl = self.GenNode(Node['Value'])
            self.Text.append(f"\tmov qword rax, {vl}")
            self.ReturnReserve("rax", "64")
           
        if self.Info['Higest'] < self.Info['AllocSpace']: self.Info['Higest'] = self.Info['AllocSpace']
        self.Text.append(f"\t.dropregs")
        self.Text.append(f"\tmov rsp, rbp")
        self.Text.append(f"\tpop rbp")
        self.Text.append(f"\tret")
     
    def GenSizeNode(self, Node):
        Var = self.GenNode(Node.get("Old", ""))

        ls = cast(list, self.GetRegList(Var))
        if ls[0] == Var:
            vsize = "64"
        elif ls[1] == Var:
            vsize = "32"
        elif ls[2] == Var:
            vsize = "16"
        else:
            vsize = "8"

        osize = Node['Type']['Size']

        if Node["Inst"] == "trunc": 
            reg = self.GetReg(vsize)
            self.Text.append(f"\tmov {self.GetDataSize(vsize)} {reg}, {Var}") #type: ignore
 
            nreg = self.GetSizeOfReg(Node['Type']['Size'], reg)
         
            self.VarWithRegName.append(Node['Into'])
            self.Env.AddVar(Node['New'], {
                "Type" : Node['Type'],
                "Register" : nreg,
                "MustLoad" : False,
                "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
            })
            return nreg
        elif Node["Inst"] == "iext":
            reg = self.GetReg(vsize)
            self.Text.append(f"\tmov {self.GetDataSize(vsize)} {reg}, {Var}") #type: ignore 
            self.protectreg(reg, vsize)

            if Node['Type']['Val'] == "i64":
                dreg = self.GetReg('64')
                self.Text.append(f"\tmov qword {dreg}, {self.GetSizeOfReg('64', reg)}")
                self.unprotectreg(reg, vsize)

                self.VarWithRegName(Node['New']) #type: ignore
                self.Env.AddVar(Node['New'], {
                    "Type" : Node['Type'],
                    "Register" : dreg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False, 
                    "Simd" : False,
                })
                
                return dreg 
            else:
                dreg = self.GetReg(osize)
                self.Text.append(f"\tmovzx {self.GetSizeOfReg(osize, dreg)}, {reg}")
                self.unprotectreg(reg, vsize)


                self.VarWithRegName.append(Node['New'])
                self.Env.AddVar(Node['New'], {
                    "Type" : Node['Type'],
                    "Register" : dreg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
                })
                
                return dreg 
        elif Node["Inst"] == "ext":
            reg = self.GetReg(vsize)
            self.Text.append(f"\tmov {self.GetDataSize(vsize)} {reg}, {Var}") #type: ignore 
            self.protectreg(reg, vsize)

            dreg = self.GetReg(osize)
            self.Text.append(f"\tmovsx {self.GetSizeOfReg(osize, dreg)}, {reg}")
            self.unprotectreg(reg, vsize)

            self.VarWithRegName.append(Node['New'])
            self.Env.AddVar(Node['New'], {
                    "Type" : Node['Type'],
                    "Register" : dreg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
            })
                
            return dreg 
    def GenFloatBin(self, Node):
        Inst = Node['inst']
        if Inst == "fadd":
            size = Node['Type']['Size']
            ext = self.GetDataSize(size, type_='Simd')
            self.FloatSizes = size 

            Left = self.GenNode(Node.get("Left"))
            reg = self.GetReg(size, type_='Simd')

            self.Text.append(f"\tmovs{ext} {reg}, {Left}")

            Right = self.GenNode(Node.get("Right"))
            
            self.Text.append(f"\tadds{ext} {reg}, {Right}")
            

            self.VarWithRegName_Simd.append(Node['Name'])
            self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
            })
            
            return reg 
        elif Inst == "fsub":
            size = Node['Type']['Size']
            ext = self.GetDataSize(size, type_='Simd')
            self.FloatSizes = size 

            Left = self.GenNode(Node.get("Left"))
            reg = self.GetReg(size, type_='Simd')

            self.Text.append(f"\tmovs{ext} {reg}, {Left}")

            Right = self.GenNode(Node.get("Right"))
            
            self.Text.append(f"\tsubs{ext} {reg}, {Right}")
            

            self.VarWithRegName_Simd.append(Node['Name'])
            self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
            })
            
            return reg 

        elif Inst == "fmul":
            size = Node['Type']['Size']
            ext = self.GetDataSize(size, type_='Simd')
            self.FloatSizes = size 

            Left = self.GenNode(Node.get("Left"))
            reg = self.GetReg(size, type_='Simd')

            self.Text.append(f"\tmovs{ext} {reg}, {Left}")

            Right = self.GenNode(Node.get("Right"))
            
            self.Text.append(f"\tmuls{ext} {reg}, {Right}")
            

            self.VarWithRegName_Simd.append(Node['Name'])
            self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
            })
            
            return reg 

        elif Inst == "fdiv":
            size = Node['Type']['Size']
            ext = self.GetDataSize(size, type_='Simd')
            self.FloatSizes = size 

            Left = self.GenNode(Node.get("Left"))
            reg = self.GetReg(size, type_='Simd')

            self.Text.append(f"\tmovs{ext} {reg}, {Left}")

            Right = self.GenNode(Node.get("Right"))
            
            self.Text.append(f"\tdivs{ext} {reg}, {Right}")
            

            self.VarWithRegName_Simd.append(Node['Name'])
            self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
            })
            
            return reg 


    def GenInttf(self, Node):
        if Node['inst'] == "fti":
            var = self.GenNode(Node['Loading'])
            reg = self.GetReg("0", type_='Simd') #type: ignore
            reg1 = self.GetReg(Node['Type']['Size'])
            self.Text.append(f"\tmovs{self.GetDataSize(Node['Type']['Size'], type_='Simd')} {reg}, {var}")

            self.Text.append(f"\tcvtts{self.GetDataSize(Node['Type']['Size'], type_='Simd')}2si {reg1}, {reg}")
            
            self.VarWithRegName.append(Node['Into'])
            self.Env.AddVar(Node['Into'], {
                    "Type" : Node['Type'],
                    "Register" : reg1,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : False,
            })
            return reg1 
        elif Node['inst'] == "itf":
            var = self.Env.GetVar(Node['Loading'])
            reg = self.GetReg(Node['Type']['Size'])
            reg1 = self.GetReg("0", type_='Simd') #type: ignore
            self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, {var}")

            self.Text.append(f"\tcvtsi2s{self.GetDataSize(Node['Type']['Size'], type_='Simd')} {reg1}, {reg}")
            
            self.VarWithRegName.append(Node['Into'])
            self.Env.AddVar(Node['Into'], {
                    "Type" : Node['Type'],
                    "Register" : reg1,
                    "MustLoad" : False,
                    "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
            })
            return reg 
        
    def GenMLast(self, Node):
        v = self.Env.GetVar(Node["Name"])
        
        v = cast(dict, v)
        if v["InReg"] == True:
            if v["Simd"] == True:
                self.Register["Simd"].append(self.URegister["Simd"].pop(self.URegister["Simd"].index(v["Register"]))) 
                self.VarWithRegName_Simd.remove(Node["Name"])
            else:
                pos = self.URegister["General"]["64"].index(self.GetRegList(v["Register"])[0]) #type: ignore
                
                self.Register["General"]["64"].append(self.URegister["General"]["64"].pop(pos))
                self.Register["General"]["32"].append(self.URegister["General"]["32"].pop(pos))
                self.Register["General"]["16"].append(self.URegister["General"]["16"].pop(pos))
                self.Register["General"]["8"].append(self.URegister["General"]["8"].pop(pos))
        
                self.VarWithRegName.remove(Node["Name"])
        else:
            if v["Simd"] == True:
                self.FreeStackSpace[v["Type"]['Val'][1:]].append(v["Register"])
                self.VarWithRegName_Simd.remove(Node["Name"])
            else:
                self.FreeStackSpace[v["Type"]['Val'][1:]].append(v["Register"])
                self.VarWithRegName.remove(Node["Name"])
        self.Env.Removevar(Node["Name"])
    def DitchReg(self, size, reg, type_="General"):
        if type_ == "General":
            self.Env.AddVar("Ditch" + str(self.Ditch), {
                "Type" : {
                "Kind": "Primitive",
                "Val": "i" + size,        
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
					"Ditch" : True,
                    "Simd" : False,
            })

            self.VarWithRegName.append("Ditch" + str(self.Ditch))
        else:
            self.Env.AddVar("Ditch" + str(self.Ditch), {
                "Type" : {
                "Kind": "Primitive",
                "Val": "f" + size,        
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
					"Ditch" : True,
                    "Simd" : True,
            })
            self.VarWithRegName_Simd.append("Ditch" + str(self.Ditch))
        self.Ditch+=1 

    def GenFloatSize(self, Node):
        if Node['Inst'] == "ftrunc":
            var = self.GenNode(Node['From'])
            reg = self.GetReg("0", type_="Simd")
            reg1 = self.GetReg("0", type_="Simd")

            self.Text.append(f"\tmovsd {reg1}, {var}")
            self.Text.append(f"\tcvtsd2ss {reg}, {reg1}")
       
            self.Env.AddVar(Node['To'], {
                "Type" : {
                "Kind": "Primitive",
                "Val": "f32",        
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
					"Ditch" : False,
                    "Simd" : True,
            })
            self.VarWithRegName_Simd.append(Node['To'])
            

            return reg1 
        else:
            self.FloatSizes = "32"
            var = self.GenNode(Node['From'])
            reg1 = self.GetReg("0", type_="Simd")

            self.Text.append(f"\tmovss {reg1}, {var}")
            reg = self.GetReg("0", type_="Simd")
            self.Text.append(f"\tcvtss2sd {reg}, {reg1}")
       
            self.Env.AddVar(Node['To'], {
                "Type" : {
                "Kind": "Primitive",
                "Val": "f64",        
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
			"Ditch" : False,
            "Simd" : True,
            })
            self.VarWithRegName_Simd.append(Node['To'])
            

            return reg1 
    def GenAllocNode(self, Node):
        size = str(int(Node["Size"]) * 8) 
        
        if Node['Type']['Kind'] == "Primitive":
            self.Info["AllocSpace"]+=int(Node["Size"])
            space = f"[rbp-{self.Info['AllocSpace']}]"
            if type[0] == "f":
                self.VarWithRegName_Simd.append(Node['Name'])
            else: 
                self.VarWithRegName.append(Node['Name'])
        
        elif Node['Type']['Kind'] == "Pointer":
            self.Info["AllocSpace"]+=8
            space = f"[rbp-{self.Info['AllocSpace']}]"
            
            self.VarWithRegName.append(Node['Name'])
        
        elif Node['Type']['Kind'] == "List":
            
            tsize = int(Node['Type']['Size'])
            self.Info["AllocSpace"]+=tsize // 8 
            space = f"[rbp-{self.Info['AllocSpace']}]"
        elif Node['Type']['Kind'] == "Struct":
            size = 0 
            for i in self.StructLocal.get(Node['Type']['Name'])['Elements']: 
                size+=int(i['Size'])
            
            self.Info['AllocSpace']+=size 
            space = f"[rbp-{self.Info['AllocSpace']}]"
        else:
            space = 0
        
        Name = Node['Name']
        
        self.Env.AddVar(Name,{
            "Type" : Node['Type'],
            "Register" : space,
            "MustLoad" : False,
            "InReg" : False,
			"Ditch" : False,
            "Simd" : True if type[0] == "f" else False,
        })
        self.VarWithRegName.append(Name)

    def GenStoreNode(self, Node):
        type = Node['Type']
        
        Var = self.Env.GetVar(Node["Name"])

        if type['Kind'] == "Primitive":
            typeval = type["Val"]
            self.FloatSizes = typeval[1:]
            self.IntSizes = typeval[1:]
            
           
            if typeval[0] == "f":
                Val = self.GenNode(Node['Val'])
                reg = self.GetReg(typeval[1:], type_="Simd")
                self.Text.append(f";-\n\tmovs{self.GetDataSize(typeval[1:], type_='Simd')} {reg}, {Val}")
                if Node['Point'] ==False:
                    self.Text.append(f"\tmovs{self.GetDataSize(typeval[1:], type_='Simd')} {Var['Register']}, {reg}")
                else:
                    self.Text.append(f"\tmovs{self.GetDataSize(typeval[1:], type_='Simd')} [{Var['Register']}], {reg}")
            else:
                Val = self.GenNode(Node['Val'])
                reg = self.GetReg(typeval[1:])
                self.Text.append(f"\tmov {self.GetDataSize(typeval[1:])} {reg}, {Val}")
                if Node['Point'] == False:
                    self.Text.append(f"\tmov {self.GetDataSize(typeval[1:])} {Var['Register']}, {reg}")
                else:
                    self.Text.append(f"\tmov {self.GetDataSize(typeval[1:])} [{Var['Register']}], {reg}")

        elif type['Kind'] == "Pointer":
            Val = self.GenNode(Node['Val'])
            if Node['Point'] == False: 
                self.Text.append(f"\tmov qword {Var['Register']}, {Val}")
            else:
                self.Text.append(f"\tmov qword [{Var['Register']}], {Val}")
    def GenPtrNode(self, Node):
        reg = self.GetReg("64")
        
        if Node['To'][0] == '$': 
            if Node["Type"]['To']['Kind'] in ['Primitive', "Pointer", "List", "Struct"]:
                self.Text.append(f"\tlea {reg}, {self.Env.GetVar(Node['To'])['Register']}")
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
			        "Ditch" : False,
                    "Simd" : False,
                })
                self.VarWithRegName.append(Node['Name'])
        elif Node['To'][0] == "@":
            if Node['Type']['To']['Kind'] in ['Primitive', "Pointer", "List"]:
                self.Text.append(f"\tlea {reg}, [{Node['To'][1:]}]")
                self.Env.AddVar(Node['Name'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : False,
                    "InReg" : True,
			        "Ditch" : False,
                    "Simd" : False,
                })
                self.VarWithRegName.append(Node['Name'])
                
    def GenLoadPtrNode(self, Node):
        var = self.Env.GetVar(Node['Loading'])
        if Node['Type']['Kind'] == "Primitive":
            if Node['Type']['Val'][0] == "f":
                reg = self.GetReg(Node['Type']['Size'], type_="Simd")
                ptr = var['Register']
                    
                self.Text.append(f"\tmovs{self.GetDataSize(Node['Type']['Size'], type_='Simd')} {reg}, [{ptr}]")
                self.Env.AddVar(Node['Into'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : True,
                    "InReg" : True,
			        "Ditch" : False,
                    "Simd" : True,
                })
                self.VarWithRegName.append(Node['Into'])
            else:
                reg = self.GetReg(Node['Type']['Size'])
                if var['InReg'] == False:
                    ptr = var['Register']
                else:
                    ptr = var['Register']
                    
                self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, [{ptr}]")
                self.Env.AddVar(Node['Into'], {
                    "Type" : Node['Type'],
                    "Register" : reg,
                    "MustLoad" : True,
                    "InReg" : True,
			        "Ditch" : False,
                    "Simd" : False,
                })
                self.VarWithRegName.append(Node['Into'])

        elif Node['Type'] == "Pointer":
            reg = self.GetReg(Node['Type']['Size'])
            if var['InReg'] == False:
                ptr = var['Register']
            else:
                ptr = var['Register']
                    
            self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, [{ptr}]")
            self.Env.AddVar(Node['Into'], {
                "Type" : Node['Type'],
                "Register" : reg,
                "MustLoad" : True,
                "InReg" : True,
			    "Ditch" : False,
                "Simd" : False,
            })

            self.VarWithRegName.append(Node['Into'])
    def GenDref(self, Node):
        Var = self.Env.GetVar(Node['Name'])
        size = Node['Type']['Size']
        
        if Var['Simd'] == False:
            reg = self.GetReg(size)
            self.Text.append(f"\tmov {self.GetDataSize(size)} {reg}, [{Var['Register']}]")
        else:
            reg = self.GetReg(size, type_='Simd')
            self.Text.append(f"\tmovs{self.GetDataSize(size, type_='Simd')} {reg}, [{Var['Register']}]")
        return reg 
    def GenEPtrNode(self, Node):
        self.IntSizes = "64"
        self.FloatSizes = "64"
        Var = self.Env.GetVar(Node['From'])
        if Node['Point'] == True:
            adr = Var['Register']
        else:
            adr = self.GetReg("64")
            self.Text.append(f"\tlea {adr}, {Var['Register']}")
        self.protectreg(adr, "64")

        posreg = self.GenNode(Node['Pos'])
        self.Text.append(f"\timul {posreg}, {int(Var['Type']['Of']['Size']) // 8}") 
        
        reg = self.GetReg('64')
        self.Text.append(f"\tmov qword {reg}, {adr}")
        self.Text.append(f"\tadd {reg}, {posreg}")
        self.unprotectreg(adr, "64")
        
        self.Env.AddVar(Node['Name'],{
            "Type" : Node['Type'],
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
		    "Ditch" : False,
            "Simd" : False,
        })
        self.VarWithRegName.append(Node['Name'])
        
    def GenGlobalVar(self, Node):
        if Node['Value'] == None:
            if Node['Private'] == False:
                self.Bss.append(f"\tglobal {Node['Name'][1:]}")
            
            if Node['Type']['Kind'] == "Primitive":
                self.Bss.append(f"\t{Node['Name'][1:]}: resb {Node['Size']}")
            elif Node['Type']['Kind'] == "Pointer":
                self.Bss.append(f"\t{Node['Name'][1:]}: resb 8")
            elif Node['Type']['Kind'] == "List":
                self.Bss.append(f"\t{Node['Name'][1:]}: resb {Node['Size']}")
            elif Node['Type']['Kind'] == "Struct":
                self.Bss.append(f"\t{Node['Name'][1:]}: resb {Node['Size']}")
        else:
            if Node['Private'] == False and Node['Const'] == True:
                self.RoData.append(f"\tglobal {Node['Name'][1:]}")
            elif Node['Private'] == False and Node['Const'] == False:
                self.Data.append(f"\tglobal {Node['Name'][1:]}")
            
            if Node['Const'] == True:
                sec  = self.RoData
            else:
                sec = self.Data
 
            if Node['Type']['Kind'] == "Primitive":
                Val = "0"
                if Node['Value']['Kind'] == "Integer": Val = Node['Value']['Value']
                elif Node['Value']['Kind'] == "Float": Val = Node['Value']['Value']
                sec.append(f"\t{Node['Name'][1:]}: {self.GetGlobalSize(Node['Type']['Size'])} {Val}")
            elif Node['Type']['Kind'] == "Pointer":
                Val = "0"
                if Node['Value']['Kind'] == "GIdent": Val = Node['Value']['Name'][1:]
                sec.append(f"\t{Node['Name'][1:]}: dq {Val}")
            elif Node['Type']['Kind'] == "List":
                self.IntSizes = self.GetLastType(Node['Type'])['Size']
                self.FloatSizes = self.GetLastType(Node['Type'])['Size']
                sec.append(f"\t{Node['Name'][1:]}: {self.GenList(Node['Value'])}")
            elif Node['Type']['Kind'] == "Struct":
                sec.append(f"\t{Node['Name'][1:]}: {self.GenStruct(Node['Value'], n=True)}")
        self.Env.AddVar(Node['Name'],{
                "Type" : Node['Type'],
                "Register" : Node['Name'][1:],
                "MustLoad" : False,
                "InReg" : False,
			    "Ditch" : False,
                "Simd" : False,
            })
        self.VarWithRegName.append(Node['Name'])

    
    def GetLastType(self, Node):
        if Node['Kind'] == "List":
            return self.GetLastType(Node['Of'])
        elif Node['Kind'] == "Pointer":
            return self.GetLastType(Node['To'])
        else:
            return Node 
    
    def GenStruct(self, Node, n=False) -> str:
        Code: str = ""
        s = '\t\t' if n == True else ''
        if Node['Kind'] == "Struct_c":
            for i in Node['List']:
                Code+='\n' if n == True else ''
                if i['Type']['Kind'] == "Struct": 
                    Code+=f"{s}{self.GenStruct(i)}"
                elif i['Type']['Kind'] == "Pad":
                    Code+=f"{s}times {i['Value']['Value']} db 0"
                elif i['Type']['Kind'] == "Primitive":
                    Code+=f"{s}{self.GetGlobalSize(i['Type']['Size'])} {i['Value']['Value']}"
                elif i['Type']['Kind'] == "Pointer":
                    Code+=f"{s}dq {i['Value']['Name'][1:]}"
                elif i['Type']['Kind'] == "List":
                    Code+=f"{s}{self.GenList(Node['Value'])}"
        return Code 
    def GenList(self, Node) -> str:
        Code: str = ""
        if Node['Kind'] == "Struct_c":
            Code+=self.GenStruct(Node)
        if Node['Kind'] == "List":
            Code+=f"{self.GetGlobalSize(self.IntSizes)} "
            for i in Node['List']:
                t = f"{self.GenList(i)}"
                if t[0:2] in ["dq", "dd", "dw", "dd"]:
                    t = t[2:]
                Code += t
        if Node['Kind'] == "Integer":
            Code+=f"{Node['Value']}, "
        if Node['Kind'] == "FloatSizes":
            Code+=f"{Node['Value']}, "
        if Node['Kind'] == 'GIdent':
            Code+=f"{Node['Name'][1:]}, "
        return Code 
    def GenCall(self, Node):    
        if self.plat == "Linux":  
            args_reg_int = {
                "1" : "rdi",
                "2" : "rsi",
                "3" : "rdx",
                "4" : "rcx",
                "5" : "r8",
                "6" : "r9"
            }

            self.ReserveReg("rdi", "64")
            self.ReserveReg("rax", "64")
            self.ReserveReg("rsi", "64")
            self.ReserveReg("rdx", "64")
            self.ReserveReg("rcx", "64")
            self.ReserveReg("r8", "64")
            self.ReserveReg("r9", "64")

            args_reg_float = {
                "0" : "xmm0",
                "1" : "xmm1",
                "2" : "xmm2",
                "3" : "xmm3",
                "4" : "xmm4",
                "5" : "xmm5",
                "6" : "xmm6",
                "7" : "xmm7",
            }
            
            self.ReserveReg("xmm0", "0", type_="Simd")
            self.ReserveReg("xmm1", "0", type_="Simd")
            self.ReserveReg("xmm2", "0", type_="Simd")
            self.ReserveReg("xmm3", "0", type_="Simd")
            self.ReserveReg("xmm4", "0", type_="Simd")
            self.ReserveReg("xmm5", "0", type_="Simd")
            self.ReserveReg("xmm6", "0", type_="Simd")
            self.ReserveReg("xmm7", "0", type_="Simd")
            
            floop: list = []
            if len(Node['Args']) != 0: 
                intargs = 0 
                floatargs = 0  
                stacksize = 8
                stackpos = 0 

                oop: list = []
                for indx, i in enumerate(Node['Args']):
                    if i['Type']['Kind'] == "Primitive":
                        Size = int(i['Type']['Size']) // 8
                        self.Info['AllocSpace']+=Size 
                        if i['Type']['Val'][0] == 'i':
                            if intargs >= 6: 
                                floop.append(i)  
                            else:
                                oop.append(i)
                                intargs+=1
                        if i['Type']['Val'][0] == 'f':
                            if floatargs >= 6: 
                                floop.append(i)
                            else:
                                oop.append(i)
                                floatargs+=1 
                    if i['Type']['Kind'] == "Pointer":
                        self.Info['AllocSpace']+=8 
                        if intargs >= 6: 
                            floop.append(i)
                        else:
                            oop.append(i)
                            intargs+=1
                
                self.Text.append(f"\tsub rsp, {self.aling16(len(floop) * 8)}")
                loc = len(self.Text)
                
                floatcount = 0 
                floop.reverse()
                for i in floop:
                    if i['Type']['Kind'] == "Primitive":
                        Size = int(i['Type']['Size']) // 8
                        if i['Type']['Val'][0] == 'i':
                            self.IntSizes = i['Type']['Size']
                            val = self.GenNode(i['Value'])
                            self.Text.append(f"\tpush {self.GetSizeOfReg('64', val)}")
                        if i['Type']['Val'][0] == 'f':
                            self.FloatSizes = i['Type']['Size']
                            val = self.GenNode(i['Value'])
                            self.Text.append(f"\tmov [rsp-{floatcount}], {val}")
                            floatcount+= int(i['Type']['Val'][1:]) // 8  
                    if i['Type']['Kind'] == "Pointer":
                        self.IntSizes = i['Type']['Size']
                        val = self.GenNode(i['Value'])
                        self.Text.append(f"\tpush {self.GetSizeOfReg('64', val)}")    
                
                self.Info['AllocSpace']+=floatcount

                floatcountsize = 0
                floatcount = 0
                intcount = 1 
                for i in oop:
                    if i['Type']['Kind'] == "Primitive":
                        Size = int(i['Type']['Size']) // 8 
                        if i['Type']['Val'][0] == 'i':
                            self.IntSizes = i['Type']['Size']
                            val = self.GenNode(i['Value'])
                            self.Text.append(f"\tmov {self.GetDataSize(i['Type']['Size'])} {self.GetSizeOfReg(i['Type']['Size'], args_reg_int[str(intcount)])}, {val}")
                            intcount+=1 
                        if i['Type']['Val'][0] == 'f':
                            self.FloatSizes = i['Type']['Size']
                            val = self.GenNode(i['Value'])
                            self.Text.append(f"\tmovs{self.GetDataSize(i['Type']['Size'], type_='Simd')} {args_reg_float[str(floatcount)]}, {val}")
                            floatcount+=1 
                            floatcountsize+= int(i['Type']['Val'][1:]) // 8  
                    if i['Type']['Kind'] == "Pointer":
                        self.IntSizes = i['Type']['Size']
                        val = self.GenNode(i['Value'])
                        self.Text.append(f"\tmov qword {args_reg_int[str(intcount)]}, {val}")
                        intcount+=1 
            else:
                self.Text.append(f"\tsub rsp, 16")
            if Node['Name'][0] == "@":
                if self.FuncLocal.get(Node['Name']) == True:
                    self.Text.append(f"\tcall {Node['Name'][1:]}")
                else:
                    self.Text.append(f"\tcall {Node['Name'][1:]} wrt ..plt")
            else:
                Val = self.GenLocalIdent({
                    "Kind" : "LIdent",
                    "Name" : Node['Name'],
                })

                self.Text.append(f"\tcall {Val}")

            self.Text.append(f"\tadd rsp, {self.aling16(len(floop) * 8)}")

            if Node['RetType']['Kind'] == "Primitive":
                if Node['RetType']['Val'][0] == "i":
                    self.Info['AllocSpace']+=int(Node['RetType']['Size']) // 8 
                    sz = Node['RetType']['Size']
                    self.Text.append(f"\tmov {self.GetDataSize(sz)} [rbp-{self.Info['AllocSpace']}], {self.GetSizeOfReg(sz, 'rax')}")
                    self.Env.AddVar(Node['Result'],{
                        "Type" : Node['RetType'],
                        "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                        "MustLoad" : False,
                        "InReg" : False,
			            "Ditch" : False,
                        "Simd" : False,
                    })
                    self.VarWithRegName.append(Node['Result'])
                elif Node['RetType']['Val'][0] == "f":
                    self.Info['AllocSpace']+=int(Node['RetType']['Size']) // 8 
                    sz = Node['RetType']['Size']
                    self.Text.append(f"\tmov{self.GetDataSize(sz, type_='Simd')} [rbp-{self.Info['AllocSpace']}], xmm0")
                    self.Env.AddVar(Node['Result'],{
                        "Type" : Node['RetType'],
                        "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                        "MustLoad" : False,
                        "InReg" : False,
			            "Ditch" : False,
                        "Simd" : False,
                    })
                    self.VarWithRegName.append(Node['Result'])
            if Node['RetType']['Kind'] == 'Pointer':
                    self.Info['AllocSpace']+=8 
                    self.Text.append(f"\tmov qword [rbp-{self.Info['AllocSpace']}], rax")
                    self.Env.AddVar(Node['Result'],{
                        "Type" : Node['RetType'],
                        "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                        "MustLoad" : False,
                        "InReg" : False,
			            "Ditch" : False,
                        "Simd" : False,
                    })
                    self.VarWithRegName.append(Node['Result'])
            
            self.ReturnReserve("rdi", "64")
            self.ReturnReserve("rax", "64")
            self.ReturnReserve("rsi", "64")
            self.ReturnReserve("rdx", "64")
            self.ReturnReserve("rcx", "64")
            self.ReturnReserve("r8", "64")
            self.ReturnReserve("r9", "64")
           
            self.ReturnReserve("xmm0", "0", type_="Simd")
            self.ReturnReserve("xmm1", "0", type_="Simd")
            self.ReturnReserve("xmm2", "0", type_="Simd")
            self.ReturnReserve("xmm3", "0", type_="Simd")
            self.ReturnReserve("xmm4", "0", type_="Simd")
            self.ReturnReserve("xmm5", "0", type_="Simd")
            self.ReturnReserve("xmm6", "0", type_="Simd")
            self.ReturnReserve("xmm7", "0", type_="Simd")
                
                
        elif self.plat == "Windows":
           
            args_reg_int = {
                "0" : "rcx",
                "1" : "rdx",
                "2" : "r8",
                "3" : "r9",
            }
            
            self.ReserveReg("rcx", "64")
            self.ReserveReg("rax", "64")
            self.ReserveReg("rdx", "64")
            self.ReserveReg("r8", "64")
            self.ReserveReg("r9", "64")
            args_reg_float = {
                "0" : "xmm0",
                "1" : "xmm1",
                "2" : "xmm2",
                "3" : "xmm3",
            }
            
            
            self.ReserveReg("xmm0", "0", type_="Simd")
            self.ReserveReg("xmm1", "0", type_="Simd")
            self.ReserveReg("xmm2", "0", type_="Simd")
            self.ReserveReg("xmm3", "0", type_="Simd")
            floop: list = []
            oop: list = []
            if len(Node['Args']) != 0: 
               for indx, i in enumerate(Node['Args']):
                    if indx >= 4: 
                        if i['Type']['Kind'] == "Primitive":
                            if i['Type']['Val'][0] == "i":
                                floop.append(i)
                            if i['Type']['Val'][0] == "f":
                                floop.append(i)
                        if i['Type']['Kind'] == "Pointer":
                                floop.append(i)
                    else:
                        oop.append(i)
            self.Text.append(f"\tsub rsp, 32")
            allocpos = len(self.Text)
            stackpos = 32 
            for i in floop:
                self.IntSizes = i['Type']['Size']
                self.FloatSizes = i['Type']['Size']
                if i['Type']['Kind'] == "Primitive":
                    if i['Type']['Val'][0] == "i":
                        self.IntSizes = i['Type']['Size']
                        val = self.GenNode(i['Value'])
                        self.Text.append(f"\tmov {self.GetDataSize(i['Type']['Size'])} [rsp+{stackpos}], {val}")
                        stackpos+=8 
                    if i['Type']['Val'][0] == "f":
                        self.FloatSizes = i['Type']['Size']
                        val = self.GenNode(i['Value'])
                        self.Text.append(f"\tmovs{self.GetDataSize(i['Type']['Size'], type_='Simd')} [rsp+{stackpos}], {val}")
                        stackpos+=8 
                if i['Type']['Kind'] == "Pointer":
                    self.IntSizes = i['Type']['Size']
                    val = self.GenNode(i['Value'])
                    self.Text.append(f"\tmov qword [rsp+{stackpos}], {val}")
                    stackpos+=8 
            
            argscount = 0
              
            for i in oop:
                if i['Type']['Kind'] == "Primitive":
                    if i['Type']['Val'][0] == "i":
                        self.IntSizes = i['Type']['Size']
                        val = self.GenNode(i['Value'])
                        self.Text.append(f"\tmov {self.GetDataSize(i['Type']['Size'])} {self.GetSizeOfReg(i['Type']['Size'], args_reg_int[str(argscount)])}, {val}")
                    if i['Type']['Val'][0] == "f":
                        self.FloatSizes = i['Type']['Size']
                        val = self.GenNode(i['Value'])
                        self.Text.append(f"\tmovs{self.GetDataSize(i['Type']['Size'], type_='Simd')} {args_reg_float[str(argscount)]}, {val}")
                if i['Type']['Kind'] == "Pointer":
                    self.IntSizes = i['Type']['Size']
                    val = self.GenNode(i['Value'])
                    self.Text.append(f"\tmov qword {args_reg_int[str(argscount)]}, {val}")
                    
                argscount+=1 

            self.Text[allocpos - 1] = f"\tsub rsp, {stackpos}"
            
            if Node['Name'][0] == "@":
                self.Text.append(f"\tcall {Node['Name'][1:]}")
            else:
                Val = self.GenLocalIdent({
                    "Kind" : "LIdent",
                    "Name" : Node['Name'],
                })

                self.Text.append(f"\tcall {Val}")

            self.Text.append(f"\tadd rsp, {stackpos}")

           
            if Node['RetType']['Kind'] == "Primitive":
                if Node['RetType']['Val'][0] == "i":
                    self.Info['AllocSpace']+=int(Node['RetType']['Size']) // 8 
                    sz = Node['RetType']['Size']
                    self.Text.append(f"\tmov {self.GetDataSize(sz)} [rbp-{self.Info['AllocSpace']}], {self.GetSizeOfReg(sz, 'rax')}")
                    self.Env.AddVar(Node['Result'],{
                        "Type" : Node['RetType'],
                        "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                        "MustLoad" : False,
                        "InReg" : False,
			            "Ditch" : False,
                        "Simd" : False,
                    })
                    self.VarWithRegName.append(Node['Result'])
                elif Node['RetType']['Val'][0] == "f":
                    self.Info['AllocSpace']+=int(Node['RetType']['Size']) // 8 
                    sz = Node['RetType']['Size']
                    self.Text.append(f"\tmov{self.GetDataSize(sz, type_='Simd')} [rbp-{self.Info['AllocSpace']}], xmm0")
                    self.Env.AddVar(Node['Result'],{
                        "Type" : Node['RetType'],
                        "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                        "MustLoad" : False,
                        "InReg" : False,
			            "Ditch" : False,
                        "Simd" : False,
                    })
                    self.VarWithRegName.append(Node['Result'])
            if Node['RetType']['Kind'] == 'Pointer':
                    self.Info['AllocSpace']+=8 
                    self.Text.append(f"\tmov qword [rbp-{self.Info['AllocSpace']}], rax")
                    self.Env.AddVar(Node['Result'],{
                        "Type" : Node['RetType'],
                        "Register" : f"[rbp-{self.Info['AllocSpace']}]",
                        "MustLoad" : False,
                        "InReg" : False,
			            "Ditch" : False,
                        "Simd" : False,
                    })
                    self.VarWithRegName.append(Node['Result'])
            
            self.ReturnReserve("rcx", "64")
            self.ReturnReserve("rax", "64")
            self.ReturnReserve("rdx", "64")
            self.ReturnReserve("r8", "64")
            self.ReturnReserve("r9", "64")        

            self.ReturnReserve("xmm0", "0", type_="Simd")
            self.ReturnReserve("xmm1", "0", type_="Simd")
            self.ReturnReserve("xmm2", "0", type_="Simd")
            self.ReturnReserve("xmm3", "0", type_="Simd")
                
        
    def GenExtern(self, Node):
        self.Text.append(f"extern {Node['Name'][1:]}")
        self.FuncLocal.update({Node['Name'] : False})    
    
    def GenFPtr(self, Node):
        reg = self.GetReg("64")
        self.Text.append(f"\tlea {reg}, [{Node['Name'][1:]}]")
        self.Env.AddVar(Node['In'], {
            "Type" : {
                "Kind" : "Pointer",
                "To" : { 
                    "Kind" : "Primitive",
                    "Val" : "i64",
                    "Size" : "64",
                },
                "Size" : "64",
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
            "Ditch" : False,
            "Simd" : False,
        })
           
        return reg 
    def GenGlobalIdent(self, Node):
        if Node['Name'][-1] == ":":
            self.Text.append(f"{Node['Name'][1:]}")
            

    def GenCmp(self, Node):
        size = Node['Type']['Size']
        self.IntSizes = size 
        self.FloatSizes = size
        if Node['inst'] in ["cmp", "icmp"]:
            op1 = self.GenNode(Node['Op1'])
            op2 = self.GenNode(Node['Op2'])

            self.Text.append(f"\tcmp {op1}, {op2}")
        else:
            op1 = self.GenNode(Node['Op1'])
            op2 = self.GenNode(Node['Op2'])

            self.Text.append(f"\tucomis{self.GetDataSize(size, type_='Simd')} {op1}, {op2}")
        
        reg = self.GetReg("16")
        reg2 = self.GetReg("16")
        cmptype = Node['inst']
        cmpinst = {
            "eq" : "cmove" if cmptype == "icmp" else "cmovz",
            "ne" : "cmovne" if cmptype == "icmp" else "cmovnz",
            "le" : "cmovl" if cmptype == "icmp" else "cmovb",
            "leoe" : "cmovle" if cmptype == "icmp" else "cmovbe",
            "gt" : "cmovg" if cmptype == "icmp" else "cmova",
            "gtoe" : "cmovge" if cmptype == "icmp" else "cmovae"
        }
        self.Text.append(f"\tmov word {reg}, 0")
        self.Text.append(f"\tmov word {reg2}, 1")
        self.Text.append(f"\t{cmpinst[Node['cmpinst']]} {reg}, {reg2}")
        
        self.Env.AddVar(Node['Name'], {
            "Type" : {
                "Kind" : "Primitive",
                "Val" : "i8",
                "Size" : "8",
            },
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
            "Ditch" : False,
            "Simd" : False,
        })

    def GenIf(self, Node):
        self.Text.append(f"\tcmp {self.GenNode(Node['Comp'])}, 1")
        if Node['Goto'][0] == "@":
            self.Text.append(f"\tje {Node['Goto'][1:]}")
        else: 
            Val = self.GenLocalIdent({
                "Kind" : "LIdent",
                "Name" : Node['Goto'],
            })

            self.Text.append(f"\tje [{Val}]")

    def GenGoto(self, Node):
        if Node['Name'][0] == "@":
            self.Text.append(f"\tjmp {Node['Name'][1:]}")
        else: 
            Val = self.GenLocalIdent({
                "Kind" : "LIdent",
                "Name" : Node['Name'],
            })

            self.Text.append(f"\tjmp [{Val}]")

    def GenCast(self, Node):
        x = self.Env.GetVar(Node['Name'])
        x['Type'] = Node['To']
    
    def GenShift(self, Node):
        self.IntSizes = Node['Type']['Size']
        self.FloatSizes = Node['Type']['Size']

        reg = self.GetReg(Node['Type']['Size'])
        self.Text.append(f"\tmov {self.GetDataSize(Node['Type']['Size'])} {reg}, {self.GenNode(Node['Val'])}")
        self.ReserveReg("rcx", "64")
        self.Text.append(f"\tmov cl, {self.GetSizeOfReg('8', self.GenNode(Node['Num']))}")
        self.ReturnReserve("rcx", "64")
        self.Text.append(f"\t{Node['Inst']} {reg}, cl")
        
        self.VarWithRegName.append(Node['Name'])
        self.Env.AddVar(Node['Name'], {
            "Type" : Node['Type'], 
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
            "Ditch" : False,
            "Simd" : False,
        })


        return reg 

    def GenGetSePtr(self, Node):
        Var = self.Env.GetVar(Node['Struct_Var'])
        if Node['Point'] == True:
            adr = Var['Register']
        else:
            adr = self.GetReg("64")
            self.Text.append(f"\tlea qword {adr}, {Var['Register']}")
            
        self.protectreg(adr, "64")
        struct = self.StructLocal.get(Node['Struct_Type']['Name'])['Map']

        reg = self.GetReg("64")
        self.Text.append(f"\tlea qword {reg}, [{adr} + {struct[Node['Pos']]}]")
        self.unprotectreg(adr, "64")

        self.VarWithRegName.append(Node['Name'])
        self.Env.AddVar(Node['Name'], {
            "Type" : Node['Type'], 
            "Register" : reg,
            "MustLoad" : False,
            "InReg" : True,
            "Ditch" : False,
            "Simd" : False,
        })

    def GenLable(self, Node):
        self.Text.append(f"{Node.get('Name')[1:]}")
        self.Env.AddVar(Node['Name'][:-1],{
                "Type" : {
                    "Kind" : "Primitive",
                    "Val" : "i64",
                    "Size" : "64",
                },
                "Register" : Node['Name'][1:-1],
                "MustLoad" : False,
                "InReg" : False,
			    "Ditch" : False,
                "Simd" : False,
        })
        self.VarWithRegName.append(Node['Name'][:-1])
        for i in Node.get('Body'):
            self.GenNode(i)
    def GenGlobalextern(self, Node):
        self.Text.append(f"extern {Node['Name'][1:]}")
        self.Env.AddVar(Node['Name'],{
                "Type" : Node['Type'],
                "Register" : Node['Name'][1:],
                "MustLoad" : False,
                "InReg" : False,
			    "Ditch" : False,
                "Simd" : False,
        })
        self.VarWithRegName.append(Node['Name'][1:])
    def GenNode(self, Node):
        kind = Node['Kind']
       
        if kind == "FunctionNode":
            return self.GenFunc(Node)
        elif kind == "Lable":
            return self.GenLable(Node) 
        elif kind == "Shift":
            return self.GenShift(Node)
        elif kind == "Cast":
            return self.GenCast(Node)
        elif kind == "Extern":
            return self.GenExtern(Node)
        elif kind == "Dereference":
            return self.GenDref(Node) 
        elif kind == "FloatSizeCh":
            return self.GenFloatSize(Node)
        elif kind == "MLast":
            return self.GenMLast(Node)
        elif kind == "comment":
            self.Text.append(f"\t;{Node.get('Value', '')}")
        elif kind == "LoadPtrNode":
            return self.GenLoadPtrNode(Node)
        elif kind == "GetFPtr":
            return self.GenFPtr(Node) 
        elif kind == "BinNode":
            return self.GenBin(Node)
        elif kind == "IntToFloat":
            return self.GenInttf(Node)
        elif kind == "FloatBinNode":
            return self.GenFloatBin(Node)
        elif kind == "Float":
            return self.GenFloat(Node)
        elif kind == "GetPtrNode":
            return self.GenPtrNode(Node)
        elif kind == "Globalextern":
            return self.GenGlobalextern(Node) 
        elif kind == "Integer":
            return self.GenInt(Node)
        elif kind == "LoadNode":
            return self.GenLoad(Node)
        elif kind == "LIdent":
            return self.GenLocalIdent(Node)
        elif kind == "GIdent":
            return self.GenGlobalIdent(Node)
        elif kind == "RetNode":
            return self.GenRet(Node)
        elif kind == "cmp":
            return self.GenCmp(Node)
        elif kind == "IfStmt":
            return self.GenIf(Node)
        elif kind == "Goto":
            return self.GenGoto(Node)
        elif kind == "Block":
            for i in Node['Body']:
                self.GenNode(i)
        elif kind == "SizeNode":
            return self.GenSizeNode(Node)
        elif kind == "AllocNode":
            return self.GenAllocNode(Node)
        elif kind == "StoreNode":
            return self.GenStoreNode(Node)
        elif kind == "GetEPtr":
            return self.GenEPtrNode(Node)
        elif kind == "GlobalVar":
            return self.GenGlobalVar(Node)
        elif kind == "Call":
            return self.GenCall(Node)
        elif kind == "GetSePtr":
            return self.GenGetSePtr(Node)
        elif kind == "AsmText":
            return self.Text.append(f"\t{Node['Code']}")

;--Generated By Que!--
%include "stdmac.asm"
bits 64
default rel
section .text
global start
start:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	.saveregs
	call main
	xor rdi, rdi
	mov edi, eax
	mov rax, 60
	syscall
	.dropregs
	mov rsp, rbp
	pop rbp
	ret
extern GetStdHandle
extern WriteFile
global main
main:
	push rbp
	mov rbp, rsp
	sub rsp, 304
	.saveregs
entry:
	sub rsp, 16
	mov qword r15, -11
	mov qword rdi, r15
	call GetStdHandle wrt ..plt
	add rsp, 16
	mov qword [rbp-16], rax
	mov qword r9, [rbp-16]
	lea r8, [_casestrwritten]
	mov qword rcx, r8
	mov qword rdx, 2
	mov qword rsi, rdx
	add qword rsi, 1

	mov qword rax, 4
	cmp rsi, rax
	mov word di, 0
	mov word r14w, 1
	cmova di, r14w
	cmp di, 1
	je switch1_default
	lea r13, [switch1_cases]
	mov qword r12, rsi
	lea r11, [r13-8 + r12 * 8]
	jmp [r11]
switch1_case1:
	lea r10, [_str1]
	mov qword rbx, r10
	xor rdi, rdi
	xor rax, rax
	xor rsi, rsi
	xor rdx, rdx
	mov qword [rbp-24], rcx
	xor rcx, rcx
	mov qword [rbp-32], r8
	xor r8, r8
	mov qword [rbp-40], r9
	xor r9, r9
	sub rsp, 16
	mov qword r15, [rbp-40]
	mov qword rdi, r15
	mov qword rsi, rbx
	mov dword r14d, 8
	mov dword edx, r14d
	mov qword [rbp-80], r13
	mov qword r13, [rbp-24]
	mov qword rcx, r13
	mov qword [rbp-88], r12
	mov dword r12d, 0
	mov dword r8d, r12d
	call WriteFile wrt ..plt
	add rsp, 16
	jmp end
switch1_case2:
	lea r9, [_str2]
	mov qword r8, r9
	mov qword [rbp-96], r8
	xor r8, r8
	mov qword [rbp-104], r9
	xor r9, r9
	sub rsp, 16
	mov qword [rbp-144], r11
	mov qword r11, r15
	mov qword rdi, r11
	mov qword [rbp-152], r10
	mov qword r10, [rbp-96]
	mov qword rsi, r10
	mov qword [rbp-160], rbx
	mov dword ebx, 8
	mov dword edx, ebx
	mov qword r15, r13
	mov qword rcx, r15
	mov dword r14d, 0
	mov dword r8d, r14d
	call WriteFile wrt ..plt
	add rsp, 16
	jmp end
switch1_case3:
	lea r9, [_str3]
	mov qword r8, r9
	mov qword [rbp-168], r8
	xor r8, r8
	mov qword [rbp-176], r9
	xor r9, r9
	sub rsp, 16
	mov qword r13, r11
	mov qword rdi, r13
	mov qword r12, [rbp-168]
	mov qword rsi, r12
	mov dword r11d, 8
	mov dword edx, r11d
	mov qword r10, r15
	mov qword rcx, r10
	mov dword ebx, 0
	mov dword r8d, ebx
	call WriteFile wrt ..plt
	add rsp, 16
	jmp end
switch1_case4:
	lea r9, [_str4]
	mov qword r8, r12
	mov qword [rbp-216], r8
	xor r8, r8
	mov qword [rbp-224], r9
	xor r9, r9
	sub rsp, 16
	mov qword r15, r13
	mov qword rdi, r15
	mov qword r14, [rbp-216]
	mov qword rsi, r14
	mov dword r13d, 8
	mov dword edx, r13d
	mov qword r12, r10
	mov qword rcx, r12
	mov dword r11d, 0
	mov dword r8d, r11d
	call WriteFile wrt ..plt
	add rsp, 16
	jmp end
switch1_default:
	lea r9, [_str5]
	mov qword r8, r9
	mov qword [rbp-264], r8
	xor r8, r8
	mov qword [rbp-272], r9
	xor r9, r9
	sub rsp, 16
	mov qword r10, r15
	mov qword rdi, r10
	mov qword rbx, [rbp-264]
	mov qword rsi, rbx
	mov dword r15d, 11
	mov dword edx, r15d
	mov qword r14, r12
	mov qword rcx, r14
	mov dword r13d, 0
	mov dword r8d, r13d
	call WriteFile wrt ..plt
	add rsp, 16
end:
	mov dword r9d, 1
	mov dword eax, r9d
	.dropregs
	mov rsp, rbp
	pop rbp
	ret
section .data
	global switch1_cases
	switch1_cases: dq switch1_case1, switch1_case2, switch1_case3, switch1_case4, 
	global _str1
	_str1: db 67, 97, 115, 101, 32, 49, 33, 10, 
	global _str2
	_str2: db 67, 97, 115, 101, 32, 50, 33, 10, 
	global _str3
	_str3: db 67, 97, 115, 101, 32, 51, 33, 10, 
	global _str4
	_str4: db 67, 97, 115, 101, 32, 52, 33, 10, 
	global _str5
	_str5: db 100, 101, 102, 97, 117, 108, 116, 32, 58, 40, 10, 
section .bss
	reg_storage resq 16
	xmm_storage resq 16
	global _casestrwritten
	_casestrwritten: resb 4